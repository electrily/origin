/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Exchange I-REC API
 * Swagger documentation for the Exchange I-REC API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  OrderDTO,
  CreateBidDTO,
  CreateAskDTO,
  DirectBuyDTO,
} from './exchangeIRECAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const orderControllerCreateBid = <Data = unknown>(
  createBidDTO: CreateBidDTO
) => {
  return customMutator<Data extends unknown ? OrderDTO : Data>({
    url: `/api/orders/bid`,
    method: 'post',
    data: createBidDTO,
  });
};

export const useOrderControllerCreateBid = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof orderControllerCreateBid>,
    Error,
    { data: CreateBidDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof orderControllerCreateBid>,
    Error,
    { data: CreateBidDTO }
  >((props) => {
    const { data } = props || {};

    return orderControllerCreateBid<Data>(data);
  }, mutationConfig);
};
export const orderControllerCreateAsk = <Data = unknown>(
  createAskDTO: CreateAskDTO
) => {
  return customMutator<Data extends unknown ? OrderDTO : Data>({
    url: `/api/orders/ask`,
    method: 'post',
    data: createAskDTO,
  });
};

export const useOrderControllerCreateAsk = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof orderControllerCreateAsk>,
    Error,
    { data: CreateAskDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof orderControllerCreateAsk>,
    Error,
    { data: CreateAskDTO }
  >((props) => {
    const { data } = props || {};

    return orderControllerCreateAsk<Data>(data);
  }, mutationConfig);
};
export const orderControllerDirectBuy = <Data = unknown>(
  directBuyDTO: DirectBuyDTO
) => {
  return customMutator<Data extends unknown ? OrderDTO : Data>({
    url: `/api/orders/ask/buy`,
    method: 'post',
    data: directBuyDTO,
  });
};

export const useOrderControllerDirectBuy = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof orderControllerDirectBuy>,
    Error,
    { data: DirectBuyDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof orderControllerDirectBuy>,
    Error,
    { data: DirectBuyDTO }
  >((props) => {
    const { data } = props || {};

    return orderControllerDirectBuy<Data>(data);
  }, mutationConfig);
};
export const orderControllerGetMyOrders = <Data = unknown>() => {
  return customMutator<Data extends unknown ? OrderDTO[] : Data>({
    url: `/api/orders`,
    method: 'get',
  });
};

export const getOrderControllerGetMyOrdersQueryKey = () => [`/api/orders`];

export const useOrderControllerGetMyOrders = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof orderControllerGetMyOrders>,
    Error
  >
) => {
  const queryKey = getOrderControllerGetMyOrdersQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof orderControllerGetMyOrders>,
    Error
  >(queryKey, () => orderControllerGetMyOrders<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const orderControllerGetOrder = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? OrderDTO : Data>({
    url: `/api/orders/${id}`,
    method: 'get',
  });
};

export const getOrderControllerGetOrderQueryKey = (id: string) => [
  `/api/orders/${id}`,
];

export const useOrderControllerGetOrder = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof orderControllerGetOrder>,
    Error
  >
) => {
  const queryKey = getOrderControllerGetOrderQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof orderControllerGetOrder>,
    Error
  >(queryKey, () => orderControllerGetOrder<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const orderControllerCancelOrder = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? OrderDTO : Data>({
    url: `/api/orders/${id}/cancel`,
    method: 'post',
    data: undefined,
  });
};

export const useOrderControllerCancelOrder = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof orderControllerCancelOrder>,
    Error,
    { id: string }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof orderControllerCancelOrder>,
    Error,
    { id: string }
  >((props) => {
    const { id } = props || {};

    return orderControllerCancelOrder<Data>(id);
  }, mutationConfig);
};
