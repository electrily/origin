openapi: '3.0.0'
info:
  title: 'Exchange I-REC API'
  description: 'Swagger documentation for the Exchange I-REC API'
  version: '0.1'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    access-token:
      scheme: 'bearer'
      bearerFormat: 'JWT'
      type: 'http'
  schemas:
    Operator:
      type: 'string'
      enum:
        - 'EqualsTo'
        - 'GreaterThanOrEqualsTo'
        - 'LessThanOrEqualsTo'
    DeviceVintageDTO:
      type: 'object'
      properties:
        year:
          type: 'number'
        operator:
          $ref: '#/components/schemas/Operator'
      required:
        - 'year'
    ProductDTO:
      type: 'object'
      properties:
        deviceType:
          type: 'array'
          items:
            type: 'string'
        location:
          type: 'array'
          items:
            type: 'string'
        deviceVintage:
          $ref: '#/components/schemas/DeviceVintageDTO'
        generationFrom:
          type: 'string'
        generationTo:
          type: 'string'
        gridOperator:
          type: 'array'
          items:
            type: 'string'
    CreateBidDTO:
      type: 'object'
      properties:
        volume:
          type: 'string'
        price:
          type: 'number'
        validFrom:
          format: 'date-time'
          type: 'string'
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - 'volume'
        - 'price'
        - 'validFrom'
        - 'product'
    OrderStatus:
      type: 'string'
      enum:
        - 'Active'
        - 'Cancelled'
        - 'Filled'
        - 'PartiallyFilled'
        - 'PendingCancellation'
        - 'NotExecuted'
    OrderSide:
      type: 'string'
      enum:
        - 'Bid'
        - 'Ask'
    OrderType:
      type: 'string'
      enum:
        - 'Limit'
        - 'Direct'
    OrderDTO:
      type: 'object'
      properties:
        id:
          type: 'string'
        userId:
          type: 'string'
        status:
          $ref: '#/components/schemas/OrderStatus'
        startVolume:
          type: 'string'
        currentVolume:
          type: 'string'
        side:
          $ref: '#/components/schemas/OrderSide'
        price:
          type: 'number'
        type:
          $ref: '#/components/schemas/OrderType'
        directBuyId:
          type: 'string'
        validFrom:
          format: 'date-time'
          type: 'string'
        assetId:
          type: 'string'
      required:
        - 'id'
        - 'userId'
        - 'status'
        - 'startVolume'
        - 'currentVolume'
        - 'side'
        - 'price'
        - 'type'
        - 'directBuyId'
        - 'validFrom'
        - 'assetId'
    CreateAskDTO:
      type: 'object'
      properties:
        volume:
          type: 'string'
        price:
          type: 'number'
        validFrom:
          format: 'date-time'
          type: 'string'
        assetId:
          type: 'string'
      required:
        - 'volume'
        - 'price'
        - 'validFrom'
        - 'assetId'
    DirectBuyDTO:
      type: 'object'
      properties:
        askId:
          type: 'string'
        volume:
          type: 'string'
        price:
          type: 'number'
      required:
        - 'askId'
        - 'volume'
        - 'price'
    Filter:
      type: 'string'
      enum:
        - 'All'
        - 'Specific'
        - 'Unspecified'
    ProductFilterDTO:
      type: 'object'
      properties:
        deviceType:
          type: 'array'
          items:
            type: 'string'
        location:
          type: 'array'
          items:
            type: 'string'
        deviceVintage:
          $ref: '#/components/schemas/DeviceVintageDTO'
        generationFrom:
          type: 'string'
        generationTo:
          type: 'string'
        gridOperator:
          type: 'array'
          items:
            type: 'string'
        deviceTypeFilter:
          $ref: '#/components/schemas/Filter'
        locationFilter:
          $ref: '#/components/schemas/Filter'
        deviceVintageFilter:
          $ref: '#/components/schemas/Filter'
        generationTimeFilter:
          $ref: '#/components/schemas/Filter'
        gridOperatorFilter:
          $ref: '#/components/schemas/Filter'
    OrderBookOrderDTO:
      type: 'object'
      properties:
        id:
          type: 'string'
        price:
          type: 'number'
        volume:
          type: 'string'
        userId:
          type: 'string'
        assetId:
          type: 'string'
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - 'id'
        - 'price'
        - 'volume'
        - 'userId'
        - 'product'
    TradePriceInfoDTO:
      type: 'object'
      properties:
        created:
          format: 'date-time'
          type: 'string'
        price:
          type: 'number'
        assetId:
          type: 'string'
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - 'created'
        - 'price'
        - 'assetId'
        - 'product'
    OrderBookDTO:
      type: 'object'
      properties:
        asks:
          type: 'array'
          items:
            $ref: '#/components/schemas/OrderBookOrderDTO'
        bids:
          type: 'array'
          items:
            $ref: '#/components/schemas/OrderBookOrderDTO'
        lastTradedPrice:
          $ref: '#/components/schemas/TradePriceInfoDTO'
      required:
        - 'asks'
        - 'bids'
        - 'lastTradedPrice'
    AssetDTO:
      type: 'object'
      properties:
        address:
          type: 'string'
        tokenId:
          type: 'string'
        deviceId:
          type: 'string'
        generationFrom:
          format: 'date-time'
          type: 'string'
        generationTo:
          format: 'date-time'
          type: 'string'
        id:
          type: 'string'
      required:
        - 'address'
        - 'tokenId'
        - 'deviceId'
        - 'generationFrom'
        - 'generationTo'
        - 'id'
    TimeFrame:
      type: 'string'
      enum:
        - 'Yearly'
        - 'Monthly'
        - 'Daily'
        - 'Weekly'
        - 'Hourly'
        - 'HalfHourly'
    Order:
      type: 'object'
      properties: {}
    DemandStatus:
      type: 'string'
      enum:
        - 'ACTIVE'
        - 'PAUSED'
        - 'ARCHIVED'
    DemandDTO:
      type: 'object'
      properties:
        id:
          type: 'string'
        userId:
          type: 'string'
        price:
          type: 'number'
        start:
          format: 'date-time'
          type: 'string'
        end:
          format: 'date-time'
          type: 'string'
        volumePerPeriod:
          type: 'string'
        periodTimeFrame:
          $ref: '#/components/schemas/TimeFrame'
        bids:
          type: 'array'
          items:
            $ref: '#/components/schemas/Order'
        status:
          $ref: '#/components/schemas/DemandStatus'
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - 'id'
        - 'userId'
        - 'price'
        - 'start'
        - 'end'
        - 'volumePerPeriod'
        - 'periodTimeFrame'
        - 'bids'
        - 'status'
        - 'product'
    CreateDemandDTO:
      type: 'object'
      properties:
        price:
          type: 'number'
        volumePerPeriod:
          type: 'string'
        periodTimeFrame:
          $ref: '#/components/schemas/TimeFrame'
        start:
          format: 'date-time'
          type: 'string'
        end:
          format: 'date-time'
          type: 'string'
        boundToGenerationTime:
          type: 'boolean'
        excludeEnd:
          type: 'boolean'
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - 'price'
        - 'volumePerPeriod'
        - 'periodTimeFrame'
        - 'start'
        - 'end'
        - 'boundToGenerationTime'
        - 'excludeEnd'
        - 'product'
    DemandSummaryDTO:
      type: 'object'
      properties:
        bids:
          type: 'array'
          items:
            $ref: '#/components/schemas/CreateBidDTO'
        volume:
          type: 'string'
      required:
        - 'bids'
        - 'volume'
    TradeDTO:
      type: 'object'
      properties:
        id:
          type: 'string'
        created:
          type: 'string'
        volume:
          type: 'string'
        price:
          type: 'number'
        bidId:
          type: 'string'
        askId:
          type: 'string'
        assetId:
          type: 'string'
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - 'id'
        - 'created'
        - 'volume'
        - 'price'
        - 'bidId'
        - 'askId'
        - 'assetId'
        - 'product'
paths:
  /api/orders/bid:
    post:
      operationId: 'OrderController_createBid'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBidDTO'
      responses:
        201:
          description: 'Create a bid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
      tags:
        - 'orders'
      security:
        - access-token: []
        - access-token: []
  /api/orders/ask:
    post:
      operationId: 'OrderController_createAsk'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAskDTO'
      responses:
        201:
          description: 'Create an ask'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
      tags:
        - 'orders'
      security:
        - access-token: []
        - access-token: []
  /api/orders/ask/buy:
    post:
      operationId: 'OrderController_directBuy'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectBuyDTO'
      responses:
        201:
          description: 'Direct buy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
      tags:
        - 'orders'
      security:
        - access-token: []
        - access-token: []
  /api/orders:
    get:
      operationId: 'OrderController_getMyOrders'
      parameters: []
      responses:
        200:
          description: 'Get my orders'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/OrderDTO'
      tags:
        - 'orders'
      security:
        - access-token: []
        - access-token: []
  /api/orders/{id}:
    get:
      operationId: 'OrderController_getOrder'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Get order'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
      tags:
        - 'orders'
      security:
        - access-token: []
        - access-token: []
  /api/orders/{id}/cancel:
    post:
      operationId: 'OrderController_cancelOrder'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        202:
          description: 'Cancel an order'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
      tags:
        - 'orders'
      security:
        - access-token: []
        - access-token: []
  /api/orderbook/search:
    post:
      operationId: 'OrderBookController_getByProduct'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFilterDTO'
      responses:
        200:
          description: 'Gets the order book'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBookDTO'
      tags:
        - 'orderbook'
      security:
        - access-token: []
  /api/orderbook/public/search:
    post:
      operationId: 'OrderBookController_getByProductPublic'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFilterDTO'
      responses:
        200:
          description: 'Gets the public order book'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBookDTO'
      tags:
        - 'orderbook'
      security:
        - access-token: []
  /api/asset/{id}:
    get:
      operationId: 'AssetController_get'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Gets the Asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDTO'
      tags:
        - 'asset'
      security:
        - access-token: []
  /api/demand/{id}:
    get:
      operationId: 'DemandController_findOne'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Get a demand'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
  /api/demand:
    get:
      operationId: 'DemandController_getAll'
      parameters: []
      responses:
        200:
          description: 'Get all demands'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/DemandDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
    post:
      operationId: 'DemandController_create'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDemandDTO'
      responses:
        201:
          description: 'Create a demand'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
  /api/demand/summary:
    post:
      operationId: 'DemandController_summary'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDemandDTO'
      responses:
        200:
          description: 'Get a demand summary'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandSummaryDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
  /api/demand/{id}/pause:
    post:
      operationId: 'DemandController_pause'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        202:
          description: 'Pause a Demand'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
  /api/demand/{id}/resume:
    post:
      operationId: 'DemandController_resume'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        202:
          description: 'Resume a Demand'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
  /api/demand/{id}/archive:
    post:
      operationId: 'DemandController_archive'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        202:
          description: 'Archive a Demand'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
  /api/demand/{id}/replace:
    post:
      operationId: 'DemandController_replace'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDemandDTO'
      responses:
        201:
          description: 'Replace a Demand'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
      tags:
        - 'demand'
      security:
        - access-token: []
        - access-token: []
  /api/trade:
    get:
      operationId: 'TradeController_getAll'
      parameters: []
      responses:
        200:
          description: 'Get all trades'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/TradeDTO'
      tags:
        - 'trade'
      security:
        - access-token: []
        - access-token: []
