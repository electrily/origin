openapi: '3.0.0'
info:
  title: 'Issuer API'
  description: 'Swagger documentation for the Issuer API'
  version: '0.1'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    access-token:
      scheme: 'bearer'
      bearerFormat: 'JWT'
      type: 'http'
  schemas:
    EnergyDTO:
      type: 'object'
      properties:
        publicVolume:
          type: 'string'
        privateVolume:
          type: 'string'
        claimedVolume:
          type: 'string'
      required:
        - 'publicVolume'
        - 'privateVolume'
        - 'claimedVolume'
    ClaimDataDTO:
      type: 'object'
      properties:
        beneficiary:
          type: 'string'
        address:
          type: 'string'
        region:
          type: 'string'
        zipCode:
          type: 'string'
        countryCode:
          type: 'string'
        fromDate:
          format: 'date-time'
          type: 'string'
        toDate:
          format: 'date-time'
          type: 'string'
    ClaimDTO:
      type: 'object'
      properties:
        id:
          type: 'number'
        from:
          type: 'string'
        to:
          type: 'string'
        topic:
          type: 'number'
        value:
          type: 'number'
        claimData:
          $ref: '#/components/schemas/ClaimDataDTO'
      required:
        - 'id'
        - 'from'
        - 'to'
        - 'topic'
        - 'value'
        - 'claimData'
    CertificateDTO:
      type: 'object'
      properties:
        id:
          type: 'number'
        tokenId:
          type: 'number'
        deviceId:
          type: 'string'
        generationStartTime:
          type: 'number'
        generationEndTime:
          type: 'number'
        creationTime:
          type: 'number'
        energy:
          $ref: '#/components/schemas/EnergyDTO'
        isOwned:
          type: 'boolean'
        isClaimed:
          type: 'boolean'
        myClaims:
          type: 'array'
          items:
            $ref: '#/components/schemas/ClaimDTO'
        claims:
          type: 'array'
          items:
            $ref: '#/components/schemas/ClaimDTO'
        blockchain:
          type: 'object'
        creationBlockHash:
          type: 'string'
        issuedPrivately:
          type: 'boolean'
      required:
        - 'id'
        - 'tokenId'
        - 'deviceId'
        - 'generationStartTime'
        - 'generationEndTime'
        - 'creationTime'
        - 'energy'
        - 'isOwned'
        - 'isClaimed'
    IssueCertificateDTO:
      type: 'object'
      properties:
        to:
          type: 'string'
        energy:
          type: 'string'
        fromTime:
          type: 'number'
        toTime:
          type: 'number'
        deviceId:
          type: 'string'
        isPrivate:
          type: 'boolean'
      required:
        - 'to'
        - 'energy'
        - 'fromTime'
        - 'toTime'
        - 'deviceId'
    DelegatedTransferOptions:
      type: 'object'
      properties:
        signature:
          type: 'string'
        from:
          type: 'string'
      required:
        - 'signature'
    TransferCertificateDTO:
      type: 'object'
      properties:
        to:
          type: 'string'
        delegated:
          $ref: '#/components/schemas/DelegatedTransferOptions'
        amount:
          type: 'string'
      required:
        - 'to'
    SuccessResponseDTO:
      type: 'object'
      properties:
        success:
          type: 'boolean'
        message:
          type: 'string'
      required:
        - 'success'
    ClaimCertificateDTO:
      type: 'object'
      properties:
        claimData:
          $ref: '#/components/schemas/ClaimDataDTO'
        amount:
          type: 'string'
      required:
        - 'claimData'
    BulkClaimCertificatesDTO:
      type: 'object'
      properties:
        certificateIds:
          type: 'array'
          items:
            type: 'number'
        claimData:
          type: 'object'
      required:
        - 'certificateIds'
        - 'claimData'
    CertificateEvent:
      type: 'object'
      properties:
        name:
          type: 'string'
        timestamp:
          type: 'number'
        values:
          type: 'object'
      required:
        - 'name'
        - 'timestamp'
        - 'values'
    BlockchainPropertiesDTO:
      type: 'object'
      properties:
        netId:
          type: 'number'
        registry:
          type: 'string'
        issuer:
          type: 'string'
        rpcNode:
          type: 'string'
        rpcNodeFallback:
          type: 'string'
      required:
        - 'netId'
        - 'registry'
        - 'issuer'
        - 'rpcNode'
        - 'rpcNodeFallback'
    CertificationRequestStatus:
      type: 'string'
      enum:
        - 'Queued'
        - 'Executed'
        - 'Error'
    CertificationRequestDTO:
      type: 'object'
      properties:
        id:
          type: 'number'
        deviceId:
          type: 'string'
        energy:
          type: 'string'
        owner:
          type: 'string'
        fromTime:
          type: 'number'
        toTime:
          type: 'number'
        files:
          type: 'array'
          items:
            type: 'string'
        created:
          type: 'number'
        approved:
          type: 'boolean'
        revoked:
          type: 'boolean'
        requestId:
          type: 'number'
        approvedDate:
          format: 'date-time'
          type: 'string'
        revokedDate:
          format: 'date-time'
          type: 'string'
        issuedCertificateTokenId:
          type: 'number'
        status:
          $ref: '#/components/schemas/CertificationRequestStatus'
        isPrivate:
          type: 'boolean'
      required:
        - 'id'
        - 'deviceId'
        - 'energy'
        - 'owner'
        - 'fromTime'
        - 'toTime'
        - 'files'
        - 'created'
        - 'approved'
        - 'revoked'
        - 'requestId'
    CreateCertificationRequestDTO:
      type: 'object'
      properties:
        to:
          type: 'string'
        energy:
          type: 'string'
        fromTime:
          type: 'number'
        toTime:
          type: 'number'
        deviceId:
          type: 'string'
        files:
          type: 'array'
          items:
            type: 'string'
        isPrivate:
          type: 'boolean'
      required:
        - 'to'
        - 'energy'
        - 'fromTime'
        - 'toTime'
        - 'deviceId'
paths:
  /api/certificate/{id}:
    get:
      operationId: 'CertificateController_get'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Returns a Certificate'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDTO'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/certificate/token-id/{tokenId}:
    get:
      operationId: 'CertificateController_getByTokenId'
      parameters:
        - name: 'tokenId'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Returns a Certificate by token ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDTO'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/certificate:
    get:
      operationId: 'CertificateController_getAll'
      parameters: []
      responses:
        200:
          description: 'Returns all Certificates'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/CertificateDTO'
      tags:
        - 'certificates'
      security:
        - access-token: []
    post:
      operationId: 'CertificateController_issue'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCertificateDTO'
      responses:
        201:
          description: 'Returns the issued Certificate'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDTO'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/certificate/issuer/certified/{deviceId}:
    get:
      operationId: 'CertificateController_getAggregateCertifiedEnergyByDeviceId'
      parameters:
        - name: 'deviceId'
          required: true
          in: 'path'
          schema:
            type: 'string'
        - name: 'start'
          required: true
          in: 'query'
          schema:
            type: 'string'
        - name: 'end'
          required: true
          in: 'query'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Returns SUM of certified energy by device ID'
          content:
            application/json:
              schema:
                type: 'string'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/certificate/{id}/transfer:
    put:
      operationId: 'CertificateController_transfer'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferCertificateDTO'
      responses:
        200:
          description: 'Returns whether the transfer succeeded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/certificate/{id}/claim:
    put:
      operationId: 'CertificateController_claim'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimCertificateDTO'
      responses:
        200:
          description: 'Returns whether the claim succeeded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/certificate/bulk-claim:
    put:
      operationId: 'CertificateController_bulkClaim'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkClaimCertificatesDTO'
      responses:
        200:
          description: 'Returns whether the bulk claim succeeded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/certificate/{id}/events:
    get:
      operationId: 'CertificateController_getAllEvents'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Returns all the events for a Certificate'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/CertificateEvent'
      tags:
        - 'certificates'
      security:
        - access-token: []
  /api/blockchain-properties:
    get:
      operationId: 'BlockchainPropertiesController_get'
      parameters: []
      responses:
        200:
          description: 'Returns blockchain properties'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainPropertiesDTO'
      tags:
        - 'blockchain-properties'
      security:
        - access-token: []
  /api/certification-request/{id}:
    get:
      operationId: 'CertificationRequestController_get'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Returns a Certification Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationRequestDTO'
      tags:
        - 'certification-requests'
      security:
        - access-token: []
  /api/certification-request:
    get:
      operationId: 'CertificationRequestController_getAll'
      parameters: []
      responses:
        200:
          description: 'Returns all Certification Requests'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/CertificationRequestDTO'
      tags:
        - 'certification-requests'
      security:
        - access-token: []
    post:
      operationId: 'CertificationRequestController_create'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCertificationRequestDTO'
      responses:
        200:
          description: 'Creates a Certification Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationRequestDTO'
      tags:
        - 'certification-requests'
      security:
        - access-token: []
  /api/certification-request/{certificateId}:
    get:
      operationId: 'CertificationRequestController_getByCertificate'
      parameters:
        - name: 'certificateId'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Returns a Certification Request by a certificate ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationRequestDTO'
      tags:
        - 'certification-requests'
      security:
        - access-token: []
  /api/certification-request/{id}/approve:
    put:
      operationId: 'CertificationRequestController_approve'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Approves a Certification Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'certification-requests'
      security:
        - access-token: []
  /api/certification-request/{id}/revoke:
    put:
      operationId: 'CertificationRequestController_revoke'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Revokes a Certification Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'certification-requests'
      security:
        - access-token: []
