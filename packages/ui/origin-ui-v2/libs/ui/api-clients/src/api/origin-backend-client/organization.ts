/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Origin Backend API
 * Swagger documentation for the Origin Backend API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  FullOrganizationInfoDTO,
  NewOrganizationDTO,
  SuccessResponseDTO,
  OrganizationUpdateDTO,
  PublicOrganizationInfoDTO,
  InvitationDTO,
  User,
  UpdateMemberDTO,
} from './originBackendAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const organizationControllerGetAll = <Data = unknown>() => {
  return customMutator<Data extends unknown ? FullOrganizationInfoDTO[] : Data>(
    {
      url: `/api/Organization`,
      method: 'get',
    }
  );
};

export const getOrganizationControllerGetAllQueryKey = () => [
  `/api/Organization`,
];

export const useOrganizationControllerGetAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof organizationControllerGetAll>,
    Error
  >
) => {
  const queryKey = getOrganizationControllerGetAllQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof organizationControllerGetAll>,
    Error
  >(queryKey, () => organizationControllerGetAll<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const organizationControllerRegister = <Data = unknown>(
  newOrganizationDTO: NewOrganizationDTO
) => {
  return customMutator<Data extends unknown ? FullOrganizationInfoDTO : Data>({
    url: `/api/Organization`,
    method: 'post',
    data: newOrganizationDTO,
  });
};

export const useOrganizationControllerRegister = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof organizationControllerRegister>,
    Error,
    { data: NewOrganizationDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof organizationControllerRegister>,
    Error,
    { data: NewOrganizationDTO }
  >((props) => {
    const { data } = props || {};

    return organizationControllerRegister<Data>(data);
  }, mutationConfig);
};
export const organizationControllerGet = <Data = unknown>(id: number) => {
  return customMutator<Data extends unknown ? FullOrganizationInfoDTO : Data>({
    url: `/api/Organization/${id}`,
    method: 'get',
  });
};

export const getOrganizationControllerGetQueryKey = (id: number) => [
  `/api/Organization/${id}`,
];

export const useOrganizationControllerGet = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof organizationControllerGet>,
    Error
  >
) => {
  const queryKey = getOrganizationControllerGetQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof organizationControllerGet>,
    Error
  >(queryKey, () => organizationControllerGet<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const organizationControllerDelete = <Data = unknown>(id: number) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/Organization/${id}`,
    method: 'delete',
  });
};

export const useOrganizationControllerDelete = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof organizationControllerDelete>,
    Error,
    { id: number }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof organizationControllerDelete>,
    Error,
    { id: number }
  >((props) => {
    const { id } = props || {};

    return organizationControllerDelete<Data>(id);
  }, mutationConfig);
};
export const organizationControllerUpdate = <Data = unknown>(
  id: number,
  organizationUpdateDTO: OrganizationUpdateDTO
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/Organization/${id}`,
    method: 'put',
    data: organizationUpdateDTO,
  });
};

export const useOrganizationControllerUpdate = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof organizationControllerUpdate>,
    Error,
    { id: number; data: OrganizationUpdateDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof organizationControllerUpdate>,
    Error,
    { id: number; data: OrganizationUpdateDTO }
  >((props) => {
    const { id, data } = props || {};

    return organizationControllerUpdate<Data>(id, data);
  }, mutationConfig);
};
export const organizationControllerGetPublic = <Data = unknown>(id: number) => {
  return customMutator<Data extends unknown ? PublicOrganizationInfoDTO : Data>(
    {
      url: `/api/Organization/${id}/public`,
      method: 'get',
    }
  );
};

export const getOrganizationControllerGetPublicQueryKey = (id: number) => [
  `/api/Organization/${id}/public`,
];

export const useOrganizationControllerGetPublic = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof organizationControllerGetPublic>,
    Error
  >
) => {
  const queryKey = getOrganizationControllerGetPublicQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof organizationControllerGetPublic>,
    Error
  >(queryKey, () => organizationControllerGetPublic<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const organizationControllerGetInvitationsForOrganization = <
  Data = unknown
>(
  id: number
) => {
  return customMutator<Data extends unknown ? InvitationDTO[] : Data>({
    url: `/api/Organization/${id}/invitations`,
    method: 'get',
  });
};

export const getOrganizationControllerGetInvitationsForOrganizationQueryKey = (
  id: number
) => [`/api/Organization/${id}/invitations`];

export const useOrganizationControllerGetInvitationsForOrganization = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof organizationControllerGetInvitationsForOrganization>,
    Error
  >
) => {
  const queryKey = getOrganizationControllerGetInvitationsForOrganizationQueryKey(
    id
  );

  const query = useQuery<
    AsyncReturnType<typeof organizationControllerGetInvitationsForOrganization>,
    Error
  >(
    queryKey,
    () => organizationControllerGetInvitationsForOrganization<Data>(id),
    { enabled: !!id, ...queryConfig }
  );

  return {
    queryKey,
    ...query,
  };
};

export const organizationControllerGetUsers = <Data = unknown>(id: number) => {
  return customMutator<Data extends unknown ? User[] : Data>({
    url: `/api/Organization/${id}/users`,
    method: 'get',
  });
};

export const getOrganizationControllerGetUsersQueryKey = (id: number) => [
  `/api/Organization/${id}/users`,
];

export const useOrganizationControllerGetUsers = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof organizationControllerGetUsers>,
    Error
  >
) => {
  const queryKey = getOrganizationControllerGetUsersQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof organizationControllerGetUsers>,
    Error
  >(queryKey, () => organizationControllerGetUsers<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const organizationControllerRemoveMember = <Data = unknown>(
  id: number,
  memberId: number
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/Organization/${id}/remove-member/${memberId}`,
    method: 'put',
    data: undefined,
  });
};

export const useOrganizationControllerRemoveMember = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof organizationControllerRemoveMember>,
    Error,
    { id: number; memberId: number }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof organizationControllerRemoveMember>,
    Error,
    { id: number; memberId: number }
  >((props) => {
    const { id, memberId } = props || {};

    return organizationControllerRemoveMember<Data>(id, memberId);
  }, mutationConfig);
};
export const organizationControllerChangeMemberRole = <Data = unknown>(
  id: number,
  userId: number,
  updateMemberDTO: UpdateMemberDTO
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/Organization/${id}/change-role/${userId}`,
    method: 'put',
    data: updateMemberDTO,
  });
};

export const useOrganizationControllerChangeMemberRole = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof organizationControllerChangeMemberRole>,
    Error,
    { id: number; userId: number; data: UpdateMemberDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof organizationControllerChangeMemberRole>,
    Error,
    { id: number; userId: number; data: UpdateMemberDTO }
  >((props) => {
    const { id, userId, data } = props || {};

    return organizationControllerChangeMemberRole<Data>(id, userId, data);
  }, mutationConfig);
};
