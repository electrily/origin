/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Issuer API
 * Swagger documentation for the Issuer API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  CertificationRequestDTO,
  CreateCertificationRequestDTO,
  SuccessResponseDTO,
} from './issuerAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const certificationRequestControllerGet = <Data = unknown>(
  id: number
) => {
  return customMutator<Data extends unknown ? CertificationRequestDTO : Data>({
    url: `/api/certification-request/${id}`,
    method: 'get',
  });
};

export const getCertificationRequestControllerGetQueryKey = (id: number) => [
  `/api/certification-request/${id}`,
];

export const useCertificationRequestControllerGet = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof certificationRequestControllerGet>,
    Error
  >
) => {
  const queryKey = getCertificationRequestControllerGetQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof certificationRequestControllerGet>,
    Error
  >(queryKey, () => certificationRequestControllerGet<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const certificationRequestControllerGetAll = <Data = unknown>() => {
  return customMutator<Data extends unknown ? CertificationRequestDTO[] : Data>(
    { url: `/api/certification-request`, method: 'get' }
  );
};

export const getCertificationRequestControllerGetAllQueryKey = () => [
  `/api/certification-request`,
];

export const useCertificationRequestControllerGetAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof certificationRequestControllerGetAll>,
    Error
  >
) => {
  const queryKey = getCertificationRequestControllerGetAllQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof certificationRequestControllerGetAll>,
    Error
  >(queryKey, () => certificationRequestControllerGetAll<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const certificationRequestControllerCreate = <Data = unknown>(
  createCertificationRequestDTO: CreateCertificationRequestDTO
) => {
  return customMutator<Data extends unknown ? CertificationRequestDTO : Data>({
    url: `/api/certification-request`,
    method: 'post',
    data: createCertificationRequestDTO,
  });
};

export const useCertificationRequestControllerCreate = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof certificationRequestControllerCreate>,
    Error,
    { data: CreateCertificationRequestDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof certificationRequestControllerCreate>,
    Error,
    { data: CreateCertificationRequestDTO }
  >((props) => {
    const { data } = props || {};

    return certificationRequestControllerCreate<Data>(data);
  }, mutationConfig);
};
export const certificationRequestControllerGetByCertificate = <Data = unknown>(
  certificateId: number
) => {
  return customMutator<Data extends unknown ? CertificationRequestDTO : Data>({
    url: `/api/certification-request/${certificateId}`,
    method: 'get',
  });
};

export const getCertificationRequestControllerGetByCertificateQueryKey = (
  certificateId: number
) => [`/api/certification-request/${certificateId}`];

export const useCertificationRequestControllerGetByCertificate = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  certificateId: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof certificationRequestControllerGetByCertificate>,
    Error
  >
) => {
  const queryKey = getCertificationRequestControllerGetByCertificateQueryKey(
    certificateId
  );

  const query = useQuery<
    AsyncReturnType<typeof certificationRequestControllerGetByCertificate>,
    Error
  >(
    queryKey,
    () => certificationRequestControllerGetByCertificate<Data>(certificateId),
    { enabled: !!certificateId, ...queryConfig }
  );

  return {
    queryKey,
    ...query,
  };
};

export const certificationRequestControllerApprove = <Data = unknown>(
  id: number
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/certification-request/${id}/approve`,
    method: 'put',
    data: undefined,
  });
};

export const useCertificationRequestControllerApprove = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof certificationRequestControllerApprove>,
    Error,
    { id: number }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof certificationRequestControllerApprove>,
    Error,
    { id: number }
  >((props) => {
    const { id } = props || {};

    return certificationRequestControllerApprove<Data>(id);
  }, mutationConfig);
};
export const certificationRequestControllerRevoke = <Data = unknown>(
  id: number
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/certification-request/${id}/revoke`,
    method: 'put',
    data: undefined,
  });
};

export const useCertificationRequestControllerRevoke = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof certificationRequestControllerRevoke>,
    Error,
    { id: number }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof certificationRequestControllerRevoke>,
    Error,
    { id: number }
  >((props) => {
    const { id } = props || {};

    return certificationRequestControllerRevoke<Data>(id);
  }, mutationConfig);
};
