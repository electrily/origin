openapi: '3.0.0'
info:
  title: 'Origin Backend API'
  description: 'Swagger documentation for the Origin Backend API'
  version: '0.1'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    access-token:
      scheme: 'bearer'
      bearerFormat: 'JWT'
      type: 'http'
  schemas:
    LoginDataDTO:
      type: 'object'
      properties:
        username:
          type: 'string'
        password:
          type: 'string'
      required:
        - 'username'
        - 'password'
    LoginReturnDataDTO:
      type: 'object'
      properties:
        accessToken:
          type: 'string'
      required:
        - 'accessToken'
    FileUploadDto:
      type: 'object'
      properties:
        files:
          type: 'array'
          items:
            type: 'blob'
            format: 'binary'
      required:
        - 'files'
    FileDto:
      type: 'object'
      properties:
        data:
          type: 'blob'
          format: 'binary'
      required:
        - 'data'
    RegisterUserDTO:
      type: 'object'
      properties:
        title:
          type: 'string'
        firstName:
          type: 'string'
        lastName:
          type: 'string'
        email:
          type: 'string'
        telephone:
          type: 'string'
        password:
          type: 'string'
      required:
        - 'title'
        - 'firstName'
        - 'lastName'
        - 'email'
        - 'telephone'
        - 'password'
    UserStatus:
      type: 'string'
      enum:
        - 'Pending'
        - 'Active'
        - 'Suspended'
        - 'Deleted'
    KYCStatus:
      type: 'string'
      enum:
        - 'Pending'
        - 'Passed'
        - 'Rejected'
    OrganizationStatus:
      type: 'string'
      enum:
        - 'Submitted'
        - 'Denied'
        - 'Active'
    PublicOrganizationInfoDTO:
      type: 'object'
      properties:
        id:
          type: 'number'
        name:
          type: 'string'
        address:
          type: 'string'
        zipCode:
          type: 'string'
        city:
          type: 'string'
        country:
          type: 'string'
        businessType:
          type: 'string'
        tradeRegistryCompanyNumber:
          type: 'string'
        vatNumber:
          type: 'string'
        status:
          $ref: '#/components/schemas/OrganizationStatus'
      required:
        - 'id'
        - 'name'
        - 'address'
        - 'zipCode'
        - 'city'
        - 'country'
        - 'businessType'
        - 'tradeRegistryCompanyNumber'
        - 'vatNumber'
        - 'status'
    UserDTO:
      type: 'object'
      properties:
        id:
          type: 'number'
        title:
          type: 'string'
        firstName:
          type: 'string'
        lastName:
          type: 'string'
        email:
          type: 'string'
        telephone:
          type: 'string'
        notifications:
          type: 'boolean'
        rights:
          type: 'number'
        status:
          $ref: '#/components/schemas/UserStatus'
        kycStatus:
          $ref: '#/components/schemas/KYCStatus'
        organization:
          $ref: '#/components/schemas/PublicOrganizationInfoDTO'
        emailConfirmed:
          type: 'boolean'
        blockchainAccountAddress:
          type: 'string'
        blockchainAccountSignedMessage:
          type: 'string'
      required:
        - 'id'
        - 'title'
        - 'firstName'
        - 'lastName'
        - 'email'
        - 'telephone'
        - 'notifications'
        - 'rights'
        - 'status'
        - 'kycStatus'
        - 'organization'
    UpdateOwnUserSettingsDTO:
      type: 'object'
      properties:
        notifications:
          type: 'boolean'
      required:
        - 'notifications'
    UpdateUserProfileDTO:
      type: 'object'
      properties:
        firstName:
          type: 'string'
        lastName:
          type: 'string'
        email:
          type: 'string'
        telephone:
          type: 'string'
      required:
        - 'firstName'
        - 'lastName'
        - 'email'
        - 'telephone'
    UpdatePasswordDTO:
      type: 'object'
      properties:
        oldPassword:
          type: 'string'
        newPassword:
          type: 'string'
      required:
        - 'oldPassword'
        - 'newPassword'
    BindBlockchainAccountDTO:
      type: 'object'
      properties:
        signedMessage:
          type: 'string'
      required:
        - 'signedMessage'
    SuccessResponseDTO:
      type: 'object'
      properties:
        success:
          type: 'boolean'
        message:
          type: 'string'
      required:
        - 'success'
    ExternalDeviceIdTypeDTO:
      type: 'object'
      properties:
        type:
          type: 'string'
        autogenerated:
          type: 'boolean'
        required:
          type: 'boolean'
      required:
        - 'type'
    ConfigurationDTO:
      type: 'object'
      properties:
        countryName:
          type: 'string'
        currencies:
          type: 'array'
          items:
            type: 'string'
        regions:
          type: 'object'
        externalDeviceIdTypes:
          type: 'array'
          items:
            $ref: '#/components/schemas/ExternalDeviceIdTypeDTO'
        complianceStandard:
          type: 'string'
        deviceTypes:
          type: 'array'
          items:
            type: 'array'
            items:
              type: 'string'
        gridOperators:
          type: 'array'
          items:
            type: 'string'
    FullOrganizationInfoDTO:
      type: 'object'
      properties:
        id:
          type: 'number'
        name:
          type: 'string'
        address:
          type: 'string'
        zipCode:
          type: 'string'
        city:
          type: 'string'
        country:
          type: 'string'
        businessType:
          type: 'string'
        tradeRegistryCompanyNumber:
          type: 'string'
        vatNumber:
          type: 'string'
        status:
          $ref: '#/components/schemas/OrganizationStatus'
        signatoryFullName:
          type: 'string'
        signatoryAddress:
          type: 'string'
        signatoryZipCode:
          type: 'string'
        signatoryCity:
          type: 'string'
        signatoryCountry:
          type: 'string'
        signatoryEmail:
          type: 'string'
        signatoryPhoneNumber:
          type: 'string'
        documentIds:
          type: 'array'
          items:
            type: 'string'
        signatoryDocumentIds:
          type: 'array'
          items:
            type: 'string'
      required:
        - 'id'
        - 'name'
        - 'address'
        - 'zipCode'
        - 'city'
        - 'country'
        - 'businessType'
        - 'tradeRegistryCompanyNumber'
        - 'vatNumber'
        - 'status'
        - 'signatoryFullName'
        - 'signatoryAddress'
        - 'signatoryZipCode'
        - 'signatoryCity'
        - 'signatoryCountry'
        - 'signatoryEmail'
        - 'signatoryPhoneNumber'
    OrganizationInvitationStatus:
      type: 'string'
      enum:
        - 'Pending'
        - 'Rejected'
        - 'Accepted'
        - 'Viewed'
    InvitationDTO:
      type: 'object'
      properties:
        id:
          type: 'number'
        email:
          type: 'string'
        role:
          type: 'number'
        status:
          $ref: '#/components/schemas/OrganizationInvitationStatus'
        organization:
          $ref: '#/components/schemas/PublicOrganizationInfoDTO'
        sender:
          type: 'string'
        createdAt:
          format: 'date-time'
          type: 'string'
      required:
        - 'id'
        - 'email'
        - 'role'
        - 'status'
        - 'organization'
        - 'sender'
        - 'createdAt'
    User:
      type: 'object'
      properties: {}
    NewOrganizationDTO:
      type: 'object'
      properties:
        name:
          type: 'string'
        address:
          type: 'string'
        zipCode:
          type: 'string'
        city:
          type: 'string'
        country:
          type: 'string'
        businessType:
          type: 'string'
        tradeRegistryCompanyNumber:
          type: 'string'
        vatNumber:
          type: 'string'
        signatoryFullName:
          type: 'string'
        signatoryAddress:
          type: 'string'
        signatoryZipCode:
          type: 'string'
        signatoryCity:
          type: 'string'
        signatoryCountry:
          type: 'string'
        signatoryEmail:
          type: 'string'
        signatoryPhoneNumber:
          type: 'string'
        documentIds:
          type: 'array'
          items:
            type: 'string'
        signatoryDocumentIds:
          type: 'array'
          items:
            type: 'string'
      required:
        - 'name'
        - 'address'
        - 'zipCode'
        - 'city'
        - 'country'
        - 'businessType'
        - 'tradeRegistryCompanyNumber'
        - 'vatNumber'
        - 'signatoryFullName'
        - 'signatoryAddress'
        - 'signatoryZipCode'
        - 'signatoryCity'
        - 'signatoryCountry'
        - 'signatoryEmail'
        - 'signatoryPhoneNumber'
    OrganizationUpdateDTO:
      type: 'object'
      properties:
        status:
          $ref: '#/components/schemas/OrganizationStatus'
      required:
        - 'status'
    UpdateMemberDTO:
      type: 'object'
      properties:
        role:
          type: 'number'
      required:
        - 'role'
    InviteDTO:
      type: 'object'
      properties:
        email:
          type: 'string'
        role:
          type: 'number'
      required:
        - 'email'
        - 'role'
    UpdateUserDTO:
      type: 'object'
      properties:
        title:
          type: 'string'
        firstName:
          type: 'string'
        lastName:
          type: 'string'
        email:
          type: 'string'
        telephone:
          type: 'string'
        status:
          $ref: '#/components/schemas/UserStatus'
        kycStatus:
          $ref: '#/components/schemas/KYCStatus'
      required:
        - 'title'
        - 'firstName'
        - 'lastName'
        - 'email'
        - 'telephone'
        - 'status'
        - 'kycStatus'
paths:
  /api/auth/login:
    post:
      operationId: 'AppController_login'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDataDTO'
      responses:
        200:
          description: 'Log in'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginReturnDataDTO'
      tags:
        - 'auth'
      security:
        - access-token: []
  /api/file:
    post:
      operationId: 'FileController_upload'
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadDto'
      responses:
        201:
          description: 'Upload a file'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'string'
      tags:
        - 'file'
      security:
        - access-token: []
  /api/file/{id}:
    get:
      operationId: 'FileController_download'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Download a file'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDto'
        404:
          description: "The file doesn't exist"
      tags:
        - 'file'
      security:
        - access-token: []
  /api/file/public/{id}:
    get:
      operationId: 'FileController_downloadAnonymously'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Download a file anonymously'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDto'
        404:
          description: "The file doesn't exist"
      tags:
        - 'file'
      security:
        - access-token: []
  /api/file/public:
    post:
      operationId: 'FileController_uploadAnonymously'
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadDto'
      responses:
        201:
          description: 'Upload a file'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'string'
      tags:
        - 'file'
      security:
        - access-token: []
  /api/user/register:
    post:
      operationId: 'UserController_register'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDTO'
      responses:
        201:
          description: 'Register a user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user/me:
    get:
      operationId: 'UserController_me'
      parameters: []
      responses:
        200:
          description: 'Get my user profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user:
    put:
      operationId: 'UserController_updateOwnUserSettings'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOwnUserSettingsDTO'
      responses:
        200:
          description: 'Update you own user settings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user/{id}:
    get:
      operationId: 'UserController_get'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: "Get another user's data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user/profile:
    put:
      operationId: 'UserController_updateOwnProfile'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileDTO'
      responses:
        200:
          description: 'Update your own profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        422:
          description: 'Input data validation failed'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user/password:
    put:
      operationId: 'UserController_updateOwnPassword'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDTO'
      responses:
        200:
          description: 'Update your own password'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user/chainAddress:
    put:
      operationId: 'UserController_updateOwnBlockchainAddress'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindBlockchainAccountDTO'
      responses:
        200:
          description: 'Update your own blockchain address'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user/confirm-email/{token}:
    put:
      operationId: 'UserController_confirmToken'
      parameters:
        - name: 'token'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Confirm an email confirmation token'
          content:
            application/json:
              schema:
                type: 'string'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/user/re-send-confirm-email:
    put:
      operationId: 'UserController_reSendEmailConfirmation'
      parameters: []
      responses:
        200:
          description: 'Re-send a confirmation email'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'user'
      security:
        - access-token: []
  /api/configuration:
    get:
      operationId: 'ConfigurationController_get'
      parameters: []
      responses:
        200:
          description: 'Returns the Configuration'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationDTO'
      tags:
        - 'configuration'
      security:
        - access-token: []
    put:
      operationId: 'ConfigurationController_update'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationDTO'
      responses:
        200:
          description: 'Updates the Configuration'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationDTO'
      tags:
        - 'configuration'
      security:
        - access-token: []
  /api/Organization:
    get:
      operationId: 'OrganizationController_getAll'
      parameters: []
      responses:
        200:
          description: 'Gets all organizations'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/FullOrganizationInfoDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
    post:
      operationId: 'OrganizationController_register'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrganizationDTO'
      responses:
        201:
          description: 'Register an organization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullOrganizationInfoDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
  /api/Organization/{id}:
    get:
      operationId: 'OrganizationController_get'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Gets an organization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullOrganizationInfoDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
    delete:
      operationId: 'OrganizationController_delete'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Delete an organization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
    put:
      operationId: 'OrganizationController_update'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpdateDTO'
      responses:
        200:
          description: 'Update an organization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
  /api/Organization/{id}/public:
    get:
      operationId: 'OrganizationController_getPublic'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Gets a public organization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicOrganizationInfoDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
  /api/Organization/{id}/invitations:
    get:
      operationId: 'OrganizationController_getInvitationsForOrganization'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Gets invitations for an organization'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/InvitationDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
  /api/Organization/{id}/users:
    get:
      operationId: 'OrganizationController_getUsers'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Gets users of an organization'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - 'organization'
      security:
        - access-token: []
  /api/Organization/{id}/remove-member/{memberId}:
    put:
      operationId: 'OrganizationController_removeMember'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
        - name: 'memberId'
          required: true
          in: 'path'
          schema:
            type: 'number'
      responses:
        200:
          description: 'Removes a member from an organization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
  /api/Organization/{id}/change-role/{userId}:
    put:
      operationId: 'OrganizationController_changeMemberRole'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
        - name: 'userId'
          required: true
          in: 'path'
          schema:
            type: 'number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberDTO'
      responses:
        200:
          description: 'Removes a member from an organization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'organization'
      security:
        - access-token: []
  /api/invitation:
    get:
      operationId: 'InvitationController_getInvitations'
      parameters: []
      responses:
        200:
          description: 'Gets all invitations for a user'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/InvitationDTO'
      tags:
        - 'invitation'
      security:
        - access-token: []
    post:
      operationId: 'InvitationController_invite'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteDTO'
      responses:
        201:
          description: 'Invites a user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'invitation'
      security:
        - access-token: []
  /api/invitation/{id}/{status}:
    put:
      operationId: 'InvitationController_updateInvitation'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
        - name: 'status'
          required: true
          in: 'path'
          schema:
            $ref: '#/components/schemas/OrganizationInvitationStatus'
      responses:
        200:
          description: 'Updates an invitation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'invitation'
      security:
        - access-token: []
  /api/admin/users:
    get:
      operationId: 'AdminController_getUsers'
      parameters:
        - name: 'orgName'
          required: false
          in: 'query'
          description: 'Filter users by organization name'
          schema:
            type: 'string'
        - name: 'status'
          required: false
          in: 'query'
          description: 'Filter users by user status'
          schema:
            enum:
              - 'Pending'
              - 'Active'
              - 'Suspended'
              - 'Deleted'
            type: 'string'
        - name: 'kycStatus'
          required: false
          in: 'query'
          description: 'Filter users by KYC status'
          schema:
            enum:
              - 'Pending'
              - 'Passed'
              - 'Rejected'
            type: 'string'
      responses:
        200:
          description: 'Gets all users'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/UserDTO'
      tags:
        - 'admin'
      security:
        - access-token: []
  /api/admin/users/{id}:
    put:
      operationId: 'AdminController_updateUser'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDTO'
      responses:
        200:
          description: 'Updates a user (admin)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      tags:
        - 'admin'
      security:
        - access-token: []
