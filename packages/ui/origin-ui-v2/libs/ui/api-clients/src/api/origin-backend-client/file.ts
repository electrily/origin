/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Origin Backend API
 * Swagger documentation for the Origin Backend API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type { FileUploadDto, FileDto } from './originBackendAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const fileControllerUpload = <Data = unknown>(
  fileUploadDto: FileUploadDto
) => {
  return customMutator<Data extends unknown ? string[] : Data>({
    url: `/api/file`,
    method: 'post',
    data: fileUploadDto,
  });
};

export const useFileControllerUpload = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof fileControllerUpload>,
    Error,
    { data: FileUploadDto }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof fileControllerUpload>,
    Error,
    { data: FileUploadDto }
  >((props) => {
    const { data } = props || {};

    return fileControllerUpload<Data>(data);
  }, mutationConfig);
};
export const fileControllerDownload = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? FileDto : Data>({
    url: `/api/file/${id}`,
    method: 'get',
  });
};

export const getFileControllerDownloadQueryKey = (id: string) => [
  `/api/file/${id}`,
];

export const useFileControllerDownload = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof fileControllerDownload>,
    Error
  >
) => {
  const queryKey = getFileControllerDownloadQueryKey(id);

  const query = useQuery<AsyncReturnType<typeof fileControllerDownload>, Error>(
    queryKey,
    () => fileControllerDownload<Data>(id),
    { enabled: !!id, ...queryConfig }
  );

  return {
    queryKey,
    ...query,
  };
};

export const fileControllerDownloadAnonymously = <Data = unknown>(
  id: string
) => {
  return customMutator<Data extends unknown ? FileDto : Data>({
    url: `/api/file/public/${id}`,
    method: 'get',
  });
};

export const getFileControllerDownloadAnonymouslyQueryKey = (id: string) => [
  `/api/file/public/${id}`,
];

export const useFileControllerDownloadAnonymously = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof fileControllerDownloadAnonymously>,
    Error
  >
) => {
  const queryKey = getFileControllerDownloadAnonymouslyQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof fileControllerDownloadAnonymously>,
    Error
  >(queryKey, () => fileControllerDownloadAnonymously<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const fileControllerUploadAnonymously = <Data = unknown>(
  fileUploadDto: FileUploadDto
) => {
  return customMutator<Data extends unknown ? string[] : Data>({
    url: `/api/file/public`,
    method: 'post',
    data: fileUploadDto,
  });
};

export const useFileControllerUploadAnonymously = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof fileControllerUploadAnonymously>,
    Error,
    { data: FileUploadDto }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof fileControllerUploadAnonymously>,
    Error,
    { data: FileUploadDto }
  >((props) => {
    const { data } = props || {};

    return fileControllerUploadAnonymously<Data>(data);
  }, mutationConfig);
};
