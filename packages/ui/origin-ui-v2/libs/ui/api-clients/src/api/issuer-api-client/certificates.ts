/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Issuer API
 * Swagger documentation for the Issuer API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  CertificateDTO,
  IssueCertificateDTO,
  CertificateControllerGetAggregateCertifiedEnergyByDeviceIdParams,
  SuccessResponseDTO,
  TransferCertificateDTO,
  ClaimCertificateDTO,
  BulkClaimCertificatesDTO,
  CertificateEvent,
} from './issuerAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const certificateControllerGet = <Data = unknown>(id: number) => {
  return customMutator<Data extends unknown ? CertificateDTO : Data>({
    url: `/api/certificate/${id}`,
    method: 'get',
  });
};

export const getCertificateControllerGetQueryKey = (id: number) => [
  `/api/certificate/${id}`,
];

export const useCertificateControllerGet = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof certificateControllerGet>,
    Error
  >
) => {
  const queryKey = getCertificateControllerGetQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof certificateControllerGet>,
    Error
  >(queryKey, () => certificateControllerGet<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const certificateControllerGetByTokenId = <Data = unknown>(
  tokenId: number
) => {
  return customMutator<Data extends unknown ? CertificateDTO : Data>({
    url: `/api/certificate/token-id/${tokenId}`,
    method: 'get',
  });
};

export const getCertificateControllerGetByTokenIdQueryKey = (
  tokenId: number
) => [`/api/certificate/token-id/${tokenId}`];

export const useCertificateControllerGetByTokenId = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  tokenId: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof certificateControllerGetByTokenId>,
    Error
  >
) => {
  const queryKey = getCertificateControllerGetByTokenIdQueryKey(tokenId);

  const query = useQuery<
    AsyncReturnType<typeof certificateControllerGetByTokenId>,
    Error
  >(queryKey, () => certificateControllerGetByTokenId<Data>(tokenId), {
    enabled: !!tokenId,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const certificateControllerGetAll = <Data = unknown>() => {
  return customMutator<Data extends unknown ? CertificateDTO[] : Data>({
    url: `/api/certificate`,
    method: 'get',
  });
};

export const getCertificateControllerGetAllQueryKey = () => [
  `/api/certificate`,
];

export const useCertificateControllerGetAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof certificateControllerGetAll>,
    Error
  >
) => {
  const queryKey = getCertificateControllerGetAllQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof certificateControllerGetAll>,
    Error
  >(queryKey, () => certificateControllerGetAll<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const certificateControllerIssue = <Data = unknown>(
  issueCertificateDTO: IssueCertificateDTO
) => {
  return customMutator<Data extends unknown ? CertificateDTO : Data>({
    url: `/api/certificate`,
    method: 'post',
    data: issueCertificateDTO,
  });
};

export const useCertificateControllerIssue = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof certificateControllerIssue>,
    Error,
    { data: IssueCertificateDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof certificateControllerIssue>,
    Error,
    { data: IssueCertificateDTO }
  >((props) => {
    const { data } = props || {};

    return certificateControllerIssue<Data>(data);
  }, mutationConfig);
};
export const certificateControllerGetAggregateCertifiedEnergyByDeviceId = <
  Data = unknown
>(
  deviceId: string,
  params?: CertificateControllerGetAggregateCertifiedEnergyByDeviceIdParams
) => {
  return customMutator<Data extends unknown ? string : Data>({
    url: `/api/certificate/issuer/certified/${deviceId}`,
    method: 'get',
    params,
  });
};

export const getCertificateControllerGetAggregateCertifiedEnergyByDeviceIdQueryKey = (
  deviceId: string,
  params?: CertificateControllerGetAggregateCertifiedEnergyByDeviceIdParams
) => [
  `/api/certificate/issuer/certified/${deviceId}`,
  ...(params ? [params] : []),
];

export const useCertificateControllerGetAggregateCertifiedEnergyByDeviceId = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  deviceId: string,
  params?: CertificateControllerGetAggregateCertifiedEnergyByDeviceIdParams,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<
      typeof certificateControllerGetAggregateCertifiedEnergyByDeviceId
    >,
    Error
  >
) => {
  const queryKey = getCertificateControllerGetAggregateCertifiedEnergyByDeviceIdQueryKey(
    deviceId,
    params
  );

  const query = useQuery<
    AsyncReturnType<
      typeof certificateControllerGetAggregateCertifiedEnergyByDeviceId
    >,
    Error
  >(
    queryKey,
    () =>
      certificateControllerGetAggregateCertifiedEnergyByDeviceId<Data>(
        deviceId,
        params
      ),
    { enabled: !!deviceId, ...queryConfig }
  );

  return {
    queryKey,
    ...query,
  };
};

export const certificateControllerTransfer = <Data = unknown>(
  id: number,
  transferCertificateDTO: TransferCertificateDTO
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/certificate/${id}/transfer`,
    method: 'put',
    data: transferCertificateDTO,
  });
};

export const useCertificateControllerTransfer = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof certificateControllerTransfer>,
    Error,
    { id: number; data: TransferCertificateDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof certificateControllerTransfer>,
    Error,
    { id: number; data: TransferCertificateDTO }
  >((props) => {
    const { id, data } = props || {};

    return certificateControllerTransfer<Data>(id, data);
  }, mutationConfig);
};
export const certificateControllerClaim = <Data = unknown>(
  id: number,
  claimCertificateDTO: ClaimCertificateDTO
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/certificate/${id}/claim`,
    method: 'put',
    data: claimCertificateDTO,
  });
};

export const useCertificateControllerClaim = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof certificateControllerClaim>,
    Error,
    { id: number; data: ClaimCertificateDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof certificateControllerClaim>,
    Error,
    { id: number; data: ClaimCertificateDTO }
  >((props) => {
    const { id, data } = props || {};

    return certificateControllerClaim<Data>(id, data);
  }, mutationConfig);
};
export const certificateControllerBulkClaim = <Data = unknown>(
  bulkClaimCertificatesDTO: BulkClaimCertificatesDTO
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/certificate/bulk-claim`,
    method: 'put',
    data: bulkClaimCertificatesDTO,
  });
};

export const useCertificateControllerBulkClaim = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof certificateControllerBulkClaim>,
    Error,
    { data: BulkClaimCertificatesDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof certificateControllerBulkClaim>,
    Error,
    { data: BulkClaimCertificatesDTO }
  >((props) => {
    const { data } = props || {};

    return certificateControllerBulkClaim<Data>(data);
  }, mutationConfig);
};
export const certificateControllerGetAllEvents = <Data = unknown>(
  id: number
) => {
  return customMutator<Data extends unknown ? CertificateEvent[] : Data>({
    url: `/api/certificate/${id}/events`,
    method: 'get',
  });
};

export const getCertificateControllerGetAllEventsQueryKey = (id: number) => [
  `/api/certificate/${id}/events`,
];

export const useCertificateControllerGetAllEvents = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: number,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof certificateControllerGetAllEvents>,
    Error
  >
) => {
  const queryKey = getCertificateControllerGetAllEventsQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof certificateControllerGetAllEvents>,
    Error
  >(queryKey, () => certificateControllerGetAllEvents<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};
