/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Issuer API
 * Swagger documentation for the Issuer API
 * OpenAPI spec version: 0.1
 */
export interface EnergyDTO {
  publicVolume: string;
  privateVolume: string;
  claimedVolume: string;
}

export interface ClaimDataDTO {
  beneficiary?: string;
  address?: string;
  region?: string;
  zipCode?: string;
  countryCode?: string;
  fromDate?: string;
  toDate?: string;
}

export interface ClaimDTO {
  id: number;
  from: string;
  to: string;
  topic: number;
  value: number;
  claimData: ClaimDataDTO;
}

//eslint-disable-next-line @typescript-eslint/ban-types
export type CertificateDTOBlockchain = {};

export interface CertificateDTO {
  id: number;
  tokenId: number;
  deviceId: string;
  generationStartTime: number;
  generationEndTime: number;
  creationTime: number;
  energy: EnergyDTO;
  isOwned: boolean;
  isClaimed: boolean;
  myClaims?: ClaimDTO[];
  claims?: ClaimDTO[];
  blockchain?: CertificateDTOBlockchain;
  creationBlockHash?: string;
  issuedPrivately?: boolean;
}

export interface IssueCertificateDTO {
  to: string;
  energy: string;
  fromTime: number;
  toTime: number;
  deviceId: string;
  isPrivate?: boolean;
}

export interface DelegatedTransferOptions {
  signature: string;
  from?: string;
}

export interface TransferCertificateDTO {
  to: string;
  delegated?: DelegatedTransferOptions;
  amount?: string;
}

export interface SuccessResponseDTO {
  success: boolean;
  message?: string;
}

export interface ClaimCertificateDTO {
  claimData: ClaimDataDTO;
  amount?: string;
}

export type BulkClaimCertificatesDTOClaimData = {};

export interface BulkClaimCertificatesDTO {
  certificateIds: number[];
  claimData: BulkClaimCertificatesDTOClaimData;
}

export type CertificateEventValues = {};

export interface CertificateEvent {
  name: string;
  timestamp: number;
  values: CertificateEventValues;
}

export interface BlockchainPropertiesDTO {
  netId: number;
  registry: string;
  issuer: string;
  rpcNode: string;
  rpcNodeFallback: string;
}

export type CertificationRequestStatus = 'Queued' | 'Executed' | 'Error';

export const CertificationRequestStatus = {
  Queued: 'Queued' as CertificationRequestStatus,
  Executed: 'Executed' as CertificationRequestStatus,
  Error: 'Error' as CertificationRequestStatus,
};

export interface CertificationRequestDTO {
  id: number;
  deviceId: string;
  energy: string;
  owner: string;
  fromTime: number;
  toTime: number;
  files: string[];
  created: number;
  approved: boolean;
  revoked: boolean;
  requestId: number;
  approvedDate?: string;
  revokedDate?: string;
  issuedCertificateTokenId?: number;
  status?: CertificationRequestStatus;
  isPrivate?: boolean;
}

export interface CreateCertificationRequestDTO {
  to: string;
  energy: string;
  fromTime: number;
  toTime: number;
  deviceId: string;
  files?: string[];
  isPrivate?: boolean;
}

export type CertificateControllerGetAggregateCertifiedEnergyByDeviceIdParams = {
  start: string;
  end: string;
};
