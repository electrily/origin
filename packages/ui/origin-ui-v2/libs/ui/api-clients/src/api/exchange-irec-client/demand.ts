/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Exchange I-REC API
 * Swagger documentation for the Exchange I-REC API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  DemandDTO,
  CreateDemandDTO,
  DemandSummaryDTO,
} from './exchangeIRECAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const demandControllerFindOne = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? DemandDTO : Data>({
    url: `/api/demand/${id}`,
    method: 'get',
  });
};

export const getDemandControllerFindOneQueryKey = (id: string) => [
  `/api/demand/${id}`,
];

export const useDemandControllerFindOne = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof demandControllerFindOne>,
    Error
  >
) => {
  const queryKey = getDemandControllerFindOneQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof demandControllerFindOne>,
    Error
  >(queryKey, () => demandControllerFindOne<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const demandControllerGetAll = <Data = unknown>() => {
  return customMutator<Data extends unknown ? DemandDTO[] : Data>({
    url: `/api/demand`,
    method: 'get',
  });
};

export const getDemandControllerGetAllQueryKey = () => [`/api/demand`];

export const useDemandControllerGetAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof demandControllerGetAll>,
    Error
  >
) => {
  const queryKey = getDemandControllerGetAllQueryKey();

  const query = useQuery<AsyncReturnType<typeof demandControllerGetAll>, Error>(
    queryKey,
    () => demandControllerGetAll<Data>(),
    queryConfig
  );

  return {
    queryKey,
    ...query,
  };
};

export const demandControllerCreate = <Data = unknown>(
  createDemandDTO: CreateDemandDTO
) => {
  return customMutator<Data extends unknown ? DemandDTO : Data>({
    url: `/api/demand`,
    method: 'post',
    data: createDemandDTO,
  });
};

export const useDemandControllerCreate = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof demandControllerCreate>,
    Error,
    { data: CreateDemandDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof demandControllerCreate>,
    Error,
    { data: CreateDemandDTO }
  >((props) => {
    const { data } = props || {};

    return demandControllerCreate<Data>(data);
  }, mutationConfig);
};
export const demandControllerSummary = <Data = unknown>(
  createDemandDTO: CreateDemandDTO
) => {
  return customMutator<Data extends unknown ? DemandSummaryDTO : Data>({
    url: `/api/demand/summary`,
    method: 'post',
    data: createDemandDTO,
  });
};

export const useDemandControllerSummary = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof demandControllerSummary>,
    Error,
    { data: CreateDemandDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof demandControllerSummary>,
    Error,
    { data: CreateDemandDTO }
  >((props) => {
    const { data } = props || {};

    return demandControllerSummary<Data>(data);
  }, mutationConfig);
};
export const demandControllerPause = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? DemandDTO : Data>({
    url: `/api/demand/${id}/pause`,
    method: 'post',
    data: undefined,
  });
};

export const useDemandControllerPause = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof demandControllerPause>,
    Error,
    { id: string }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof demandControllerPause>,
    Error,
    { id: string }
  >((props) => {
    const { id } = props || {};

    return demandControllerPause<Data>(id);
  }, mutationConfig);
};
export const demandControllerResume = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? DemandDTO : Data>({
    url: `/api/demand/${id}/resume`,
    method: 'post',
    data: undefined,
  });
};

export const useDemandControllerResume = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof demandControllerResume>,
    Error,
    { id: string }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof demandControllerResume>,
    Error,
    { id: string }
  >((props) => {
    const { id } = props || {};

    return demandControllerResume<Data>(id);
  }, mutationConfig);
};
export const demandControllerArchive = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? DemandDTO : Data>({
    url: `/api/demand/${id}/archive`,
    method: 'post',
    data: undefined,
  });
};

export const useDemandControllerArchive = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof demandControllerArchive>,
    Error,
    { id: string }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof demandControllerArchive>,
    Error,
    { id: string }
  >((props) => {
    const { id } = props || {};

    return demandControllerArchive<Data>(id);
  }, mutationConfig);
};
export const demandControllerReplace = <Data = unknown>(
  id: string,
  createDemandDTO: CreateDemandDTO
) => {
  return customMutator<Data extends unknown ? DemandDTO : Data>({
    url: `/api/demand/${id}/replace`,
    method: 'post',
    data: createDemandDTO,
  });
};

export const useDemandControllerReplace = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof demandControllerReplace>,
    Error,
    { id: string; data: CreateDemandDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof demandControllerReplace>,
    Error,
    { id: string; data: CreateDemandDTO }
  >((props) => {
    const { id, data } = props || {};

    return demandControllerReplace<Data>(id, data);
  }, mutationConfig);
};
